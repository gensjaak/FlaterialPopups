;
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// Node/CommonJS
		module.exports = factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {
	// Defining plugin structure and behaviour
	var Popup = function () {};

	var maxElts = 4, isConfigured = false;
	var el, elClassName = 'flaterialPopup', $body = $('body'), $elts;
	var backdropId = 'flaterialPopupBackdrop', backdrop = '<div id="' + backdropId + '" style="position:fixed;top:0;left:0;bottom:0;right:0;width:100%;height:100%;background:transparent;z-index:9998;cursor:default;"></div>';
	var opts = {
		icon: "info",
		title: "An amelioration pls ?",
		hasBackdrop: false,
		agressive: false,
		queue: true,
		autoCloseDelay: false,
		closeOnClick: true,
		closeOnMouseOver: false,
		waitingForUser: false,
		waitingForUserOpts: {}
	};

	var inflate = function (args) {
		return '<section class="' + elClassName + ' flaterialPopup_' + args.type + '"><div class="iconWrapper"><i class="' + args.icon + '"></i></div><div class="contenu"><header>' + args.title + '</header><p>' + args.body + '</p></div><div class="action-bar"></div></section>';
	};

	var isOriginalEvent = function (event) {
		return event.hasOwnProperty('originalEvent') && event.originalEvent.isTrusted;
	};

	var unQueue = function ($el) {
		$el.fadeOut('500ms', function () {
			$el.remove();
		});
	};

	// Configurations
	Popup.prototype.config = function(args) {
		if ("type" in args && ["success", "info", "error", "warning"].indexOf(args.type) > -1 && "body" in args) { /* Les autres options sont optionnels */
			args.icon = args.icon || ((args.type == "success") ? ("md md-done"):((args.type == "info") ? ("md md-info"):((args.type == "error") ? ("md md-error"):((args.type == "warning") ? ("md md-warning"):("md md-done")))));
			opts = $.fn.extend(opts, args);

			el = inflate({
				type: args.type,
				icon: args.icon,
				title: args.title,
				body: args.body
			});

			isConfigured = true;
		}

		return this;
	};

	// Show UI
	Popup.prototype.show = function() {
		if (!isConfigured) {
			throw Error("No configuration provided for Flaterial-Popup");
		}
		
		// Should Flaterial put popups in queue ?
		if (!opts.queue) {
			$('.' + elClassName).each(function (index, element, $element = $(element)) {
				unQueue($element);
			});
		}

		// Append to body
		$body.append(el);
		
		// Should Flaterial insert an overlay ?
		var $backdrop;
		if (opts.hasBackdrop) {
			$body.prepend(backdrop);
			$backdrop = $('#' + backdropId);
		} else {
			if ($backdrop) $backdrop.remove();
		}

		// Animate popups
		$elts = $('.' + elClassName);
		$elts.each(function(index, element, $element = $(element)) {
			// Should Flaterial wait for user positive or negative action before ?
			if (opts.waitingForUser && opts.waitingForUserOpts) {
				$element.addClass('waitingForUser');
				if (!($element.find('.action-bar > a').length == 2)) {
					$element.find('.action-bar').empty().append('<a href="javascript:void(0);" class="f-btn f-primary" f-behaviour="positive">' + opts.waitingForUserOpts.positiveText + '</a><a href="javascript:void(0);" class="f-btn f-default" f-behaviour="negative">' + opts.waitingForUserOpts.negativeText + '</a>');
					
					$element.find('.action-bar').find('a[f-behaviour="positive"]').on('click', function (e) {
						if (isOriginalEvent(e)) opts.waitingForUserOpts.positiveFunction();
						unQueue($element);
					});
					$element.find('.action-bar').find('a[f-behaviour="negative"]').on('click', function (e) {
						if (isOriginalEvent(e)) opts.waitingForUserOpts.negativeFunction();
						unQueue($element);
					});
				}
			}

			$element.animate({
				bottom: (parseInt($element.css('bottom').replace('px', '')) + parseInt($element.css('height').replace('px', '')) + 30) + 'px'
			}, '', 'easeOutBack', function () {
				var unQueueIfLast = function () {
					setTimeout(function () {
						$elts = $('.' + elClassName);
						if ($elts.length == 0 && opts.hasBackdrop && $backdrop) $backdrop.remove();
					}, 500);
				};

				// Autoclose popup ?
				opts.autoCloseDelay = parseInt(opts.autoCloseDelay);
				if (opts.autoCloseDelay > 0) {
					element.timer = setTimeout(function () {
						unQueue($element);
						unQueueIfLast();
					}, opts.autoCloseDelay);
				}

				// Should closeOnClick ?
				if (opts.closeOnClick) {
					$element.css({'cursor': 'pointer'});
					$element.on('click', function (e) {
						if (isOriginalEvent(e)) clearTimeout(element.timer) || unQueue($element);
						unQueueIfLast();
					});
				}

				// Should closeOnMouseOver ?
				if (opts.closeOnMouseOver) {
					$element.css({'cursor': 'default'});
					$element.on('mouseover', function (e) {
						if (isOriginalEvent(e)) clearTimeout(element.timer) || unQueue($element);
						unQueueIfLast();
					});
				}
			});
		});

		// waitingForUser moved in animate popups function
		// autoClose moved in animate popups callback function
		// closeOnClick moved in animate popups callback function
		// closeOnMouseOver moved in animate popups callback function
		// ;)

		// Remove older ones when limit reached
		if ($elts.length >= maxElts) {
			var nbToRemove = $elts.length - maxElts;
			
			for (var i = -1; nbToRemove != i; i++) {
				unQueue($($elts[i+1]));
			}
		}

		// Backdrop required for agressivity
		if (opts.agressive && opts.hasBackdrop && $body.find($backdrop)) {
			$backdrop.on('click', function (e) {
				if (isOriginalEvent(e)) {
					$($elts[0]).addClass('agressive');
					setTimeout(function () {
						$($elts[0]).removeClass('agressive');
					}, 200);
				}
			});
		}
	};

	// Whole template object
	var Flaterial = function () {
		this.popup = new Popup();
	};

	// Expose
	// window.Flaterial = $.fn.Flaterial = new Flaterial();
	window.Flaterial = new Flaterial();
	if (!window.F) window.F = window.Flaterial;
}));
