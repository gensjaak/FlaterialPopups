;
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// Node/CommonJS
		module.exports = factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {
	"use strict";
	
	// Convert '120px' or '131.8178px' to 120 or 131.8178
	$.fn.pxToValue = function (pxStr) {
		return parseFloat(pxStr.toString().replace('px', ''));
	};

	var MAXELTS = 4, TXTLIMIT = 100;
	var ELCLASSNAME = 'flaterialPopup';
	var $body = $('body');
	var backdropId = 'flaterialPopupBackdrop', backdrop = '<div id="' + backdropId + '" style="position:fixed;top:0;left:0;bottom:0;right:0;width:100%;height:100%;background:transparent;z-index:9998;cursor:default;"></div>';
	
	var inflate = function (args) {
		return '<section class="' + ELCLASSNAME + ' flaterialPopup_' + args.type + '" flaterialGroup="' + args.groupId + '"><div class="iconWrapper">' + args.icon + '</div><div class="contenu"><header>' + args.title + '</header><p>' + args.body + '</p></div><div class="action-bar"></div></section>';
	};

	var isOriginalEvent = function (event) { return event.hasOwnProperty('originalEvent') && event.originalEvent.isTrusted; };

	var unQueue = function ($el, shouldFlattern) {
		$el.fadeOut('500ms', function () {
			$el.remove();
			if (shouldFlattern) flattern(shouldFlattern);
		});
	};

	var flattern = function (shouldFlattern) {
		var $allElts = $('.' + ELCLASSNAME + '[flaterialGroup]');
		var toFlattern = [];
		$allElts.each(function (index, element) {
			var $element = $(element);
			if ($allElts[index+1]) {
				var b1 = Math.round($.fn.pxToValue($element.css('bottom')));
				var h1 = Math.round($.fn.pxToValue($element.css('height'))) + 20;
				
				var b2 = Math.round($.fn.pxToValue($($allElts[index+1]).css('bottom')));
				var h2 = Math.round($.fn.pxToValue($($allElts[index+1]).css('height'))) + 20;

				var translate = (b1)-(b2+h2);
				if (translate > 10) {
					toFlattern.push({
						$el: $($element),
						translate: (translate-10)
					});
				}
			}
		});

		if ($allElts[$allElts.length-1] && $.fn.pxToValue($($allElts[$allElts.length-1]).css('bottom')) > 10) {
			var translate = $.fn.pxToValue($($allElts[$allElts.length-1]).css('bottom'));
			toFlattern.push({
				$el: $allElts,
				translate: (translate-10)
			});
		}

		// Flattern so
		toFlattern.forEach(function (element, index) {
			element.$el.each(function (index, el) {
				var $el = $(el);
				$el.animate({
					'bottom': ($.fn.pxToValue($el.css('bottom')) - element.translate) + 'px'
				}, '', 'easeOutBack');
			});
		});
	};

	// Defining plugin structure and behaviour
	var FlaterialPopups = function () {
		var Group = this;

		this.id = 0;
		this.userConfigured = false;
		this.config = {
			icon: "info",
			title: "An amelioration pls ?",
			hasBackdrop: false,
			agressive: false,
			queue: true,
			flattern: true,
			autoCloseDelay: false,
			closeOnClick: true,
			closeOnMouseOver: false,
			waitingForUser: false,
			waitingForUserOpts: {}
		};
		this.el = "";
		this.$elts = [];

		this.Popup = function () {
			this.$myElt = {};
		};
		
		// Show UI
		this.Popup.prototype.show = function() {
			if (!Group.userConfigured) {
				throw Error("No configuration provided for Flaterial-Popup");
			}

			Group.$elts = $('.' + ELCLASSNAME + '[flaterialGroup="' + Group.id + '"]');

			// Should Flaterial put popups in queue ?
			if (!Group.config.queue) {
				Group.$elts.each(function (index, element) {
					var $element = $(element);
					unQueue($element, Group.config.flattern);
				});
			}

			// Append to body
			$body.append(Group.el);
			
			// Should Flaterial insert an overlay ?
			var $backdrop;
			if (Group.config.hasBackdrop) {
				$body.prepend(backdrop);
				$backdrop = $('#' + backdropId);
			} else {
				if ($backdrop) $backdrop.remove();
			}

			// Animate popups
			var tmp = $('.' + ELCLASSNAME + '[flaterialGroup]');
			tmp.each(function(index, element) {
				var $element = $(element);
				var ecart = 80;

				// Should Flaterial wait for user positive or negative action before ?
				if ($element.attr('flaterialGroup') == Group.id && Group.config.waitingForUser && Group.config.waitingForUserOpts) {
					$element.addClass('waitingForUser');
					if (!($element.find('.action-bar > a').length == 2)) {
						$element.find('.action-bar').empty().append('<a href="javascript:void(0);" class="f-btn f-default" f-behaviour="positive">' + Group.config.waitingForUserOpts.positiveText + '</a><a href="javascript:void(0);" class="f-btn f-primary" f-behaviour="negative">' + Group.config.waitingForUserOpts.negativeText + '</a>');
						
						$element.find('.action-bar').find('a[f-behaviour="positive"]').on('click', function (e) {
							if (isOriginalEvent(e)) Group.config.waitingForUserOpts.positiveFunction();
							unQueue($element, Group.config.flattern);
							if ($backdrop) $backdrop.remove();
						});
						$element.find('.action-bar').find('a[f-behaviour="negative"]').on('click', function (e) {
							if (isOriginalEvent(e)) Group.config.waitingForUserOpts.negativeFunction();
							unQueue($element, Group.config.flattern);
							if ($backdrop) $backdrop.remove();
						});
					}
				}

				if (Group.config.waitingForUser && Group.config.waitingForUserOpts) ecart = 200;

				$element.animate({
					bottom: (parseFloat($element.pxToValue($element.css('bottom'))) + ecart + 30) + 'px'
				}, '', 'easeOutBack', function () {
					var removeBackdropIfLast = function () {
						setTimeout(function () {
							Group.$elts = $('.' + ELCLASSNAME + '[flaterialGroup="' + Group.id + '"]');
							if (Group.$elts.length == 0 && Group.config.hasBackdrop && $backdrop) $backdrop.remove();
						}, 500);
					};

					// Autoclose popup ?
					Group.config.autoCloseDelay = parseInt(Group.config.autoCloseDelay);
					if ($element.attr('flaterialGroup') == Group.id && Group.config.autoCloseDelay > 0) {
						element.timer = setTimeout(function () {
							unQueue($element, Group.config.flattern);
							removeBackdropIfLast();
						}, Group.config.autoCloseDelay);
					}

					// Should closeOnClick ?
					if ($element.attr('flaterialGroup') == Group.id && Group.config.closeOnClick) {
						$element.css({'cursor': 'pointer'});
						$element.on('click', function (e) {
							if (isOriginalEvent(e)) clearTimeout(element.timer) || unQueue($element, Group.config.flattern);
							removeBackdropIfLast();
						});
					}

					// Should closeOnMouseOver ?
					if ($element.attr('flaterialGroup') == Group.id && Group.config.closeOnMouseOver) {
						$element.css({'cursor': 'default'});
						$element.on('mouseover', function (e) {
							if (isOriginalEvent(e)) clearTimeout(element.timer) || unQueue($element, Group.config.flattern);
							removeBackdropIfLast();
						});
					}
				});
			});

			// waitingForUser moved in animate popups function
			// autoClose moved in animate popups callback function
			// closeOnClick moved in animate popups callback function
			// closeOnMouseOver moved in animate popups callback function
			// ;)

			// Remove older ones when limit reached
			if (tmp.length >= MAXELTS) {
				var nbToRemove = tmp.length - MAXELTS;
				
				for (var i = -1; nbToRemove != i; i++) {
					unQueue($(tmp[i+1]), Group.config.flattern);
				}
			}

			// Backdrop required for agressivity
			if (Group.config.agressive && Group.config.hasBackdrop && $body.find($backdrop)) {
				Group.$elts = $('.' + ELCLASSNAME + '[flaterialGroup="' + Group.id + '"]');
				$backdrop.on('click', function (e) {
					if (isOriginalEvent(e)) {
						$(Group.$elts[0]).addClass('agressive');
						setTimeout(function () {
							$(Group.$elts[0]).removeClass('agressive');
						}, 200);
					}
				});
			}

			return this;
		};
	};

	// Configurations
	FlaterialPopups.prototype.init = function(args) {
		var defaultIcons = {
			"success": "md md-done",
			"info": "md md-info",
			"error": "md md-error",
			"warning": "md md-warning"
		};

		if (defaultIcons[args.type]) args.icon = "<i class='" + defaultIcons[args.type] + "'></i>";
		else args.icon = "<img src='" + args.type + "'>";
		
		this.config = $.fn.extend(this.config, args);
		this.id = Math.round(new Date().getTime()/Math.random());
		this.el = inflate({
			groupId: this.id,
			type: args.type,
			icon: args.icon,
			title: args.title,
			body: (args.body.toString().trim().length > TXTLIMIT) ? (args.body.toString().trim().substring(0, (TXTLIMIT - 3)) + "...") : (args.body.toString().trim())
		});
		this.userConfigured = true;

		return this;
	};

	// Expose
	window.FlaterialPopups = FlaterialPopups;
	if (!window.F) window.F = window.FlaterialPopups;
}));
